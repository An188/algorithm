
import java.io.BufferedReader;
import java.io.IOException;
import java.io.StreamTokenizer;
import java.util.*;
import java.io.InputStreamReader;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;

public class Main {
   static int n,m,a[][],f[];
    public static void main(String[] args) throws IOException {
        StreamTokenizer in=new StreamTokenizer(new BufferedReader(new InputStreamReader(System.in)));
        PrintWriter out=new PrintWriter(new OutputStreamWriter(System.out));
        in.nextToken();
        n=(int) in.nval;
        in.nextToken();
        m=(int) in.nval;
        
        f=new int[n+1];
        a=new int[m+1][3];
        for(int i=1;i<=m;i++)
        {
        	 in.nextToken();
             a[i][0]=(int) in.nval;
             in.nextToken();
             a[i][1]=(int) in.nval;
             in.nextToken();
             a[i][2]=(int) in.nval;
        }
        for(int i=1;i<=n;i++)
        {
        	f[i]=i;
        }
       Arrays.sort(a,new Comparator<int[]>() {

		@Override
		public int compare(int[] o1, int[] o2) {
			// TODO Auto-generated method stub
		return o1[2]-o2[2];
		}
       });
      for(int i=1;i<=m;i++)
      {
    	  int x=find(a[i][0]);
    	  int y=find(a[i][1]);
    	  if(x!=y)
    	  {
    		  f[x]=y;
    		  n--;
    	  }
    	  
    	  if(n==1)
    	  {
    		  out.println(a[i][2]);
    		  out.close();
    		  return;
    	  }
      }
      out.println(-1);
      out.close();
	
	}
	private static int find(int i) {
		// TODO Auto-generated method stub
		if(i==f[i]) return i;
		else return f[i]=find(f[i]);
	}
}