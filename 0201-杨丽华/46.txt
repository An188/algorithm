class Solution {
    List<List<Integer>> ans=new ArrayList<>();
    Stack<Integer> res=new Stack<>(); 
    boolean b[];
    public List<List<Integer>> permute(int[] nums) {
        b=new boolean[nums.length];
        int t[]=new int[nums.length];
        dfs(nums,0);
        return ans;
        
    }
    private void dfs(int []nums,int index)
    {
        if(index==nums.length)
        {
            ans.add(new ArrayList(res));
            return;
        }
        for(int i=0;i<nums.length;i++)
        if(!b[i])
        {
          b[i]=true;
          res.push(nums[i]);
          dfs(nums,index+1);
          res.pop();
          b[i]=false;
        }

    }
}